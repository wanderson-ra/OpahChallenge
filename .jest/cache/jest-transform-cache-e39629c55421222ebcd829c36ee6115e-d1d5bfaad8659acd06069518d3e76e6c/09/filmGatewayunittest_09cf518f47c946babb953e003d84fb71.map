{"version":3,"sources":["filmGateway.unit.test.ts"],"names":["describe","beforeEach","jest","clearAllMocks","it","resultsJson","resultJsonTemplate","build","properties","startWars","baseUrl","get","reply","films","expect","characters","toEqual","results","Date","created","director","edited","episodeId","episode_id","openingCrawl","opening_crawl","planets","producer","releaseDate","release_date","species","starships","title","url","vehicles","toBeInstanceOf","FilmNotFoundGatewayException","DefaultRestGatewayException"],"mappings":"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","sourcesContent":["import nock, { cleanAll } from \"nock\";\n\nimport { DefaultRestGatewayException } from \"../../../../../src/gateways/exceptions/defaultGatewayException\";\nimport { FilmNotFoundGatewayException } from \"../../../../../src/gateways/exceptions/filmNotFoundGatewayException\";\nimport { findAll } from \"../../../../../src/gateways/http/film/filmGateway\";\n\nimport { Film } from \"../../../../../src/domains/films\";\n\nimport { properties } from \"../../../../../src/configurations/properties\";\n\nimport { resultJsonTemplate } from \"../../../../dataBuilders/cases/http/film/resultJson.template\";\n\ndescribe(\"Tests of filmGateway/findAll\", () => {\n    beforeEach(() => {\n        jest.clearAllMocks();\n        cleanAll();\n    });\n\n    it(\"Test with success\", async () => {\n        const resultsJson = resultJsonTemplate.build();\n\n        nock(properties.startWars.baseUrl).get(\"/films/\").reply(200, resultsJson);\n\n        const films: Array<Film> = await findAll();\n\n        expect(films[0].characters).toEqual(resultsJson.results[0].characters);\n        expect(new Date(films[0].created)).toEqual(resultsJson.results[0].created);\n        expect(films[0].director).toEqual(resultsJson.results[0].director);\n        expect(new Date(films[0].edited)).toEqual(resultsJson.results[0].edited);\n        expect(films[0].episodeId).toEqual(resultsJson.results[0].episode_id);\n        expect(films[0].openingCrawl).toEqual(resultsJson.results[0].opening_crawl);\n        expect(films[0].planets).toEqual(resultsJson.results[0].planets);\n        expect(films[0].producer).toEqual(resultsJson.results[0].producer);\n        expect(new Date(films[0].releaseDate)).toEqual(resultsJson.results[0].release_date);\n        expect(films[0].species).toEqual(resultsJson.results[0].species);\n        expect(films[0].starships).toEqual(resultsJson.results[0].starships);\n        expect(films[0].title).toEqual(resultsJson.results[0].title);\n        expect(films[0].url).toEqual(resultsJson.results[0].url);\n        expect(films[0].vehicles).toEqual(resultsJson.results[0].vehicles);\n    });\n\n    it(\"Test with error not found\", async () => {\n        try {\n            nock(properties.startWars.baseUrl).get(\"/films/\").reply(404);\n            await findAll();\n        } catch (error) {\n            expect(error).toBeInstanceOf(FilmNotFoundGatewayException);\n        }\n    });\n\n    it(\"Test with error default\", async () => {\n        nock(properties.startWars.baseUrl).get(\"/films/\").reply(500);\n        try {\n            await findAll();\n        } catch (error) {\n            expect(error).toBeInstanceOf(DefaultRestGatewayException);\n        }\n    });\n});\n"]}