b21050958b3b061215afdc744331d48b
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _jestWhen = require("jest-when");

var StorageGateway = _interopRequireWildcard(require("../../../src/gateways/storage/storageGateway"));

var SaveDataStorageUseCase = _interopRequireWildcard(require("../../../src/useCases/saveDataStorageUseCase"));

describe("Tests of saveDataStorageUseCase", function () {
  beforeAll(function () {
    (0, _jestWhen.resetAllWhenMocks)();
  });
  it("Test with success string data", function _callee() {
    var valueString, key, mockedStorageGateway;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            valueString = "anyValueString";
            key = "anyKey";
            mockedStorageGateway = jest.spyOn(StorageGateway, "put");
            (0, _jestWhen.when)(mockedStorageGateway).calledWith(key, valueString).mockResolvedValue();
            _context.next = 6;
            return _regenerator.default.awrap(SaveDataStorageUseCase.save(key, valueString));

          case 6:
            expect(mockedStorageGateway).toBeCalledWith(key, valueString);

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNhdmVEYXRhU3RvcmFnZVVzZUNhc2UudW5pdC50ZXN0LnRzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwiYmVmb3JlQWxsIiwiaXQiLCJ2YWx1ZVN0cmluZyIsImtleSIsIm1vY2tlZFN0b3JhZ2VHYXRld2F5IiwiamVzdCIsInNweU9uIiwiU3RvcmFnZUdhdGV3YXkiLCJjYWxsZWRXaXRoIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJTYXZlRGF0YVN0b3JhZ2VVc2VDYXNlIiwic2F2ZSIsImV4cGVjdCIsInRvQmVDYWxsZWRXaXRoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFFQTs7QUFFQTs7QUFFQUEsUUFBUSxDQUFDLGlDQUFELEVBQW9DLFlBQU07QUFDOUNDLEVBQUFBLFNBQVMsQ0FBQyxZQUFNO0FBQ1o7QUFDSCxHQUZRLENBQVQ7QUFJQUMsRUFBQUEsRUFBRSxDQUFDLCtCQUFELEVBQWtDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUMxQkMsWUFBQUEsV0FEMEIsR0FDWixnQkFEWTtBQUUxQkMsWUFBQUEsR0FGMEIsR0FFcEIsUUFGb0I7QUFJMUJDLFlBQUFBLG9CQUowQixHQUlIQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0MsY0FBWCxFQUEyQixLQUEzQixDQUpHO0FBS2hDLGdDQUFLSCxvQkFBTCxFQUEyQkksVUFBM0IsQ0FBc0NMLEdBQXRDLEVBQTJDRCxXQUEzQyxFQUF3RE8saUJBQXhEO0FBTGdDO0FBQUEsOENBTzFCQyxzQkFBc0IsQ0FBQ0MsSUFBdkIsQ0FBNEJSLEdBQTVCLEVBQWlDRCxXQUFqQyxDQVAwQjs7QUFBQTtBQVNoQ1UsWUFBQUEsTUFBTSxDQUFDUixvQkFBRCxDQUFOLENBQTZCUyxjQUE3QixDQUE0Q1YsR0FBNUMsRUFBaURELFdBQWpEOztBQVRnQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUFsQyxDQUFGO0FBV0gsQ0FoQk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdoZW4sIHJlc2V0QWxsV2hlbk1vY2tzIH0gZnJvbSBcImplc3Qtd2hlblwiO1xuXG5pbXBvcnQgKiBhcyBTdG9yYWdlR2F0ZXdheSBmcm9tIFwiLi4vLi4vLi4vc3JjL2dhdGV3YXlzL3N0b3JhZ2Uvc3RvcmFnZUdhdGV3YXlcIjtcblxuaW1wb3J0ICogYXMgU2F2ZURhdGFTdG9yYWdlVXNlQ2FzZSBmcm9tIFwiLi4vLi4vLi4vc3JjL3VzZUNhc2VzL3NhdmVEYXRhU3RvcmFnZVVzZUNhc2VcIjtcblxuZGVzY3JpYmUoXCJUZXN0cyBvZiBzYXZlRGF0YVN0b3JhZ2VVc2VDYXNlXCIsICgpID0+IHtcbiAgICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgICAgICByZXNldEFsbFdoZW5Nb2NrcygpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJUZXN0IHdpdGggc3VjY2VzcyBzdHJpbmcgZGF0YVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlU3RyaW5nID0gXCJhbnlWYWx1ZVN0cmluZ1wiO1xuICAgICAgICBjb25zdCBrZXkgPSBcImFueUtleVwiO1xuXG4gICAgICAgIGNvbnN0IG1vY2tlZFN0b3JhZ2VHYXRld2F5ID0gamVzdC5zcHlPbihTdG9yYWdlR2F0ZXdheSwgXCJwdXRcIik7XG4gICAgICAgIHdoZW4obW9ja2VkU3RvcmFnZUdhdGV3YXkpLmNhbGxlZFdpdGgoa2V5LCB2YWx1ZVN0cmluZykubW9ja1Jlc29sdmVkVmFsdWUoKTtcblxuICAgICAgICBhd2FpdCBTYXZlRGF0YVN0b3JhZ2VVc2VDYXNlLnNhdmUoa2V5LCB2YWx1ZVN0cmluZyk7XG5cbiAgICAgICAgZXhwZWN0KG1vY2tlZFN0b3JhZ2VHYXRld2F5KS50b0JlQ2FsbGVkV2l0aChrZXksIHZhbHVlU3RyaW5nKTtcbiAgICB9KTtcbn0pO1xuIl19