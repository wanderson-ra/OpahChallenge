4842a9da19bc347578de19e1c590527c
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _jestWhen = require("jest-when");

var FilmGateway = _interopRequireWildcard(require("../../../src/gateways/http/film/filmGateway"));

var FindAllFilmsAndAddImageUrlUseCase = _interopRequireWildcard(require("../../../src/useCases/findAllFilmsAndAddImageUrlUseCase"));

var _filmTEmplate = require("../../dataBuilders/domains/filmTEmplate");

describe("Tests of FindAllFilmsAndAddImageUrlUseCase", function () {
  beforeAll(function () {
    (0, _jestWhen.resetAllWhenMocks)();
  });
  it("Test with success and add image url", function _callee() {
    var film, expectedFilmResponse, expectedFilmsList, mockedFilmGateway, filmsResponse;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            film = _filmTEmplate.filmTemplateFullWithFixedEpisodeId.build();
            expectedFilmResponse = (0, _extends2.default)({}, film, {
              imageUrl: "https://lumiere-a.akamaihd.net/v1/images/Star-Wars-Phantom-Menace-I-Poster_f5832812.jpeg?region=0%2C250%2C678%2C340&width=600"
            });
            expectedFilmsList = [expectedFilmResponse];
            mockedFilmGateway = jest.spyOn(FilmGateway, "findAll");
            (0, _jestWhen.when)(mockedFilmGateway).calledWith().mockResolvedValue([film]);
            _context.next = 7;
            return _regenerator.default.awrap(FindAllFilmsAndAddImageUrlUseCase.findAll());

          case 7:
            filmsResponse = _context.sent;
            expect(filmsResponse).toEqual(expectedFilmsList);
            expect(mockedFilmGateway).toBeCalled();

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbmRBbGxGaWxtc0FuZEFkZEltYWdlVXJsVXNlQ2FzZS51bml0LnRlc3QudHMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJiZWZvcmVBbGwiLCJpdCIsImZpbG0iLCJmaWxtVGVtcGxhdGVGdWxsV2l0aEZpeGVkRXBpc29kZUlkIiwiYnVpbGQiLCJleHBlY3RlZEZpbG1SZXNwb25zZSIsImltYWdlVXJsIiwiZXhwZWN0ZWRGaWxtc0xpc3QiLCJtb2NrZWRGaWxtR2F0ZXdheSIsImplc3QiLCJzcHlPbiIsIkZpbG1HYXRld2F5IiwiY2FsbGVkV2l0aCIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiRmluZEFsbEZpbG1zQW5kQWRkSW1hZ2VVcmxVc2VDYXNlIiwiZmluZEFsbCIsImZpbG1zUmVzcG9uc2UiLCJleHBlY3QiLCJ0b0VxdWFsIiwidG9CZUNhbGxlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQUEsUUFBUSxDQUFDLDRDQUFELEVBQStDLFlBQU07QUFDekRDLEVBQUFBLFNBQVMsQ0FBQyxZQUFNO0FBQ1o7QUFDSCxHQUZRLENBQVQ7QUFJQUMsRUFBQUEsRUFBRSxDQUFDLHFDQUFELEVBQXdDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNoQ0MsWUFBQUEsSUFEZ0MsR0FDekJDLGlEQUFtQ0MsS0FBbkMsRUFEeUI7QUFHaENDLFlBQUFBLG9CQUhnQyw4QkFJL0JILElBSitCO0FBS2xDSSxjQUFBQSxRQUFRLEVBQ0o7QUFOOEI7QUFRaENDLFlBQUFBLGlCQVJnQyxHQVFaLENBQUNGLG9CQUFELENBUlk7QUFVaENHLFlBQUFBLGlCQVZnQyxHQVVaQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0MsV0FBWCxFQUF3QixTQUF4QixDQVZZO0FBV3RDLGdDQUFLSCxpQkFBTCxFQUF3QkksVUFBeEIsR0FBcUNDLGlCQUFyQyxDQUF1RCxDQUFDWCxJQUFELENBQXZEO0FBWHNDO0FBQUEsOENBYVZZLGlDQUFpQyxDQUFDQyxPQUFsQyxFQWJVOztBQUFBO0FBYWhDQyxZQUFBQSxhQWJnQztBQWV0Q0MsWUFBQUEsTUFBTSxDQUFDRCxhQUFELENBQU4sQ0FBc0JFLE9BQXRCLENBQThCWCxpQkFBOUI7QUFDQVUsWUFBQUEsTUFBTSxDQUFDVCxpQkFBRCxDQUFOLENBQTBCVyxVQUExQjs7QUFoQnNDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQXhDLENBQUY7QUFrQkgsQ0F2Qk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdoZW4sIHJlc2V0QWxsV2hlbk1vY2tzIH0gZnJvbSBcImplc3Qtd2hlblwiO1xuXG5pbXBvcnQgKiBhcyBGaWxtR2F0ZXdheSBmcm9tIFwiLi4vLi4vLi4vc3JjL2dhdGV3YXlzL2h0dHAvZmlsbS9maWxtR2F0ZXdheVwiO1xuXG5pbXBvcnQgKiBhcyBGaW5kQWxsRmlsbXNBbmRBZGRJbWFnZVVybFVzZUNhc2UgZnJvbSBcIi4uLy4uLy4uL3NyYy91c2VDYXNlcy9maW5kQWxsRmlsbXNBbmRBZGRJbWFnZVVybFVzZUNhc2VcIjtcblxuaW1wb3J0IHsgZmlsbVRlbXBsYXRlRnVsbFdpdGhGaXhlZEVwaXNvZGVJZCB9IGZyb20gXCIuLi8uLi9kYXRhQnVpbGRlcnMvZG9tYWlucy9maWxtVEVtcGxhdGVcIjtcblxuZGVzY3JpYmUoXCJUZXN0cyBvZiBGaW5kQWxsRmlsbXNBbmRBZGRJbWFnZVVybFVzZUNhc2VcIiwgKCkgPT4ge1xuICAgIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgICAgIHJlc2V0QWxsV2hlbk1vY2tzKCk7XG4gICAgfSk7XG5cbiAgICBpdChcIlRlc3Qgd2l0aCBzdWNjZXNzIGFuZCBhZGQgaW1hZ2UgdXJsXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgZmlsbSA9IGZpbG1UZW1wbGF0ZUZ1bGxXaXRoRml4ZWRFcGlzb2RlSWQuYnVpbGQoKTtcblxuICAgICAgICBjb25zdCBleHBlY3RlZEZpbG1SZXNwb25zZSA9IHtcbiAgICAgICAgICAgIC4uLmZpbG0sXG4gICAgICAgICAgICBpbWFnZVVybDpcbiAgICAgICAgICAgICAgICBcImh0dHBzOi8vbHVtaWVyZS1hLmFrYW1haWhkLm5ldC92MS9pbWFnZXMvU3Rhci1XYXJzLVBoYW50b20tTWVuYWNlLUktUG9zdGVyX2Y1ODMyODEyLmpwZWc/cmVnaW9uPTAlMkMyNTAlMkM2NzglMkMzNDAmd2lkdGg9NjAwXCIsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGV4cGVjdGVkRmlsbXNMaXN0ID0gW2V4cGVjdGVkRmlsbVJlc3BvbnNlXTtcblxuICAgICAgICBjb25zdCBtb2NrZWRGaWxtR2F0ZXdheSA9IGplc3Quc3B5T24oRmlsbUdhdGV3YXksIFwiZmluZEFsbFwiKTtcbiAgICAgICAgd2hlbihtb2NrZWRGaWxtR2F0ZXdheSkuY2FsbGVkV2l0aCgpLm1vY2tSZXNvbHZlZFZhbHVlKFtmaWxtXSk7XG5cbiAgICAgICAgY29uc3QgZmlsbXNSZXNwb25zZSA9IGF3YWl0IEZpbmRBbGxGaWxtc0FuZEFkZEltYWdlVXJsVXNlQ2FzZS5maW5kQWxsKCk7XG5cbiAgICAgICAgZXhwZWN0KGZpbG1zUmVzcG9uc2UpLnRvRXF1YWwoZXhwZWN0ZWRGaWxtc0xpc3QpO1xuICAgICAgICBleHBlY3QobW9ja2VkRmlsbUdhdGV3YXkpLnRvQmVDYWxsZWQoKTtcbiAgICB9KTtcbn0pO1xuIl19