b3118196ba49eec901df244140a563f9
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncStorage = _interopRequireDefault(require("@react-native-community/async-storage"));

var _jestWhen = require("jest-when");

var _storageExceptionGateway = require("../../../../src/gateways/exceptions/storageExceptionGateway");

var StorageGateway = _interopRequireWildcard(require("../../../../src/gateways/storage/storageGateway"));

describe("Tests of storageGateway", function () {
  beforeEach(function () {
    (0, _jestWhen.resetAllWhenMocks)();
  });
  var key = "anyKey";
  var value = "anyValue";
  it("Test with put/success", function _callee() {
    var mockedAsyncStorage;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            mockedAsyncStorage = jest.spyOn(_asyncStorage.default, "setItem");
            (0, _jestWhen.when)(mockedAsyncStorage).calledWith(key, value).mockResolvedValue();
            _context.next = 4;
            return _regenerator.default.awrap(StorageGateway.put(key, value));

          case 4:
            expect(mockedAsyncStorage).toBeCalledWith(key, value);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("Test with put/error", function _callee2() {
    var mockedAsyncStorage;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            mockedAsyncStorage = jest.spyOn(_asyncStorage.default, "setItem");
            (0, _jestWhen.when)(mockedAsyncStorage).calledWith(key, value).mockRejectedValue(new Error());
            _context2.prev = 2;
            _context2.next = 5;
            return _regenerator.default.awrap(StorageGateway.put(key, value));

          case 5:
            _context2.next = 10;
            break;

          case 7:
            _context2.prev = 7;
            _context2.t0 = _context2["catch"](2);
            expect(_context2.t0).toBeInstanceOf(_storageExceptionGateway.StorageExceptionGateway);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, [[2, 7]], Promise);
  });
  it("Test with get/success", function _callee3() {
    var mockedAsyncStorage, valueResponse;
    return _regenerator.default.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            mockedAsyncStorage = jest.spyOn(_asyncStorage.default, "getItem");
            (0, _jestWhen.when)(mockedAsyncStorage).calledWith(key).mockResolvedValue(value);
            _context3.next = 4;
            return _regenerator.default.awrap(StorageGateway.get(key));

          case 4:
            valueResponse = _context3.sent;
            expect(valueResponse).toEqual(value);

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("Test with get/error", function _callee4() {
    var mockedAsyncStorage;
    return _regenerator.default.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            mockedAsyncStorage = jest.spyOn(_asyncStorage.default, "getItem");
            (0, _jestWhen.when)(mockedAsyncStorage).calledWith(key).mockRejectedValue(new Error());
            _context4.prev = 2;
            _context4.next = 5;
            return _regenerator.default.awrap(StorageGateway.get(key));

          case 5:
            _context4.next = 10;
            break;

          case 7:
            _context4.prev = 7;
            _context4.t0 = _context4["catch"](2);
            expect(_context4.t0).toBeInstanceOf(_storageExceptionGateway.StorageExceptionGateway);

          case 10:
          case "end":
            return _context4.stop();
        }
      }
    }, null, null, [[2, 7]], Promise);
  });
  it("Test with remove/success", function _callee5() {
    var mockedAsyncStorage;
    return _regenerator.default.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            mockedAsyncStorage = jest.spyOn(_asyncStorage.default, "removeItem");
            (0, _jestWhen.when)(mockedAsyncStorage).calledWith(key).mockResolvedValue();
            _context5.next = 4;
            return _regenerator.default.awrap(StorageGateway.remove(key));

          case 4:
            expect(mockedAsyncStorage).toHaveBeenCalledWith(key);

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("Test with remove/error", function _callee6() {
    var mockedAsyncStorage;
    return _regenerator.default.async(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            mockedAsyncStorage = jest.spyOn(_asyncStorage.default, "removeItem");
            (0, _jestWhen.when)(mockedAsyncStorage).calledWith(key).mockRejectedValue(new Error());
            _context6.prev = 2;
            _context6.next = 5;
            return _regenerator.default.awrap(StorageGateway.remove(key));

          case 5:
            _context6.next = 10;
            break;

          case 7:
            _context6.prev = 7;
            _context6.t0 = _context6["catch"](2);
            expect(_context6.t0).toBeInstanceOf(_storageExceptionGateway.StorageExceptionGateway);

          case 10:
          case "end":
            return _context6.stop();
        }
      }
    }, null, null, [[2, 7]], Promise);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0b3JhZ2VHYXRld2F5LnVuaXQudGVzdC50cyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJrZXkiLCJ2YWx1ZSIsIml0IiwibW9ja2VkQXN5bmNTdG9yYWdlIiwiamVzdCIsInNweU9uIiwiQXN5bmNTdG9yYWdlIiwiY2FsbGVkV2l0aCIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiU3RvcmFnZUdhdGV3YXkiLCJwdXQiLCJleHBlY3QiLCJ0b0JlQ2FsbGVkV2l0aCIsIm1vY2tSZWplY3RlZFZhbHVlIiwiRXJyb3IiLCJ0b0JlSW5zdGFuY2VPZiIsIlN0b3JhZ2VFeGNlcHRpb25HYXRld2F5IiwiZ2V0IiwidmFsdWVSZXNwb25zZSIsInRvRXF1YWwiLCJyZW1vdmUiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBRUFBLFFBQVEsQ0FBQyx5QkFBRCxFQUE0QixZQUFNO0FBQ3RDQyxFQUFBQSxVQUFVLENBQUMsWUFBTTtBQUNiO0FBQ0gsR0FGUyxDQUFWO0FBSUEsTUFBTUMsR0FBRyxHQUFHLFFBQVo7QUFDQSxNQUFNQyxLQUFLLEdBQUcsVUFBZDtBQUVBQyxFQUFBQSxFQUFFLENBQUMsdUJBQUQsRUFBMEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ2xCQyxZQUFBQSxrQkFEa0IsR0FDR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdDLHFCQUFYLEVBQXlCLFNBQXpCLENBREg7QUFFeEIsZ0NBQUtILGtCQUFMLEVBQXlCSSxVQUF6QixDQUFvQ1AsR0FBcEMsRUFBeUNDLEtBQXpDLEVBQWdETyxpQkFBaEQ7QUFGd0I7QUFBQSw4Q0FJbEJDLGNBQWMsQ0FBQ0MsR0FBZixDQUFtQlYsR0FBbkIsRUFBd0JDLEtBQXhCLENBSmtCOztBQUFBO0FBTXhCVSxZQUFBQSxNQUFNLENBQUNSLGtCQUFELENBQU4sQ0FBMkJTLGNBQTNCLENBQTBDWixHQUExQyxFQUErQ0MsS0FBL0M7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Q2EsaUJBQXpDLENBQTJELElBQUlDLEtBQUosRUFBM0Q7QUFGeUI7QUFBQTtBQUFBLDhDQUlmTCxjQUFjLENBQUNXLE1BQWYsQ0FBc0JwQixHQUF0QixDQUplOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFNckJXLFlBQUFBLE1BQU0sY0FBTixDQUFjSSxjQUFkLENBQTZCQyxnREFBN0I7O0FBTnFCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQTNCLENBQUY7QUFTSCxDQWpFTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFzeW5jU3RvcmFnZSBmcm9tIFwiQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvYXN5bmMtc3RvcmFnZVwiO1xuaW1wb3J0IHsgd2hlbiwgcmVzZXRBbGxXaGVuTW9ja3MgfSBmcm9tIFwiamVzdC13aGVuXCI7XG5cbmltcG9ydCB7IFN0b3JhZ2VFeGNlcHRpb25HYXRld2F5IH0gZnJvbSBcIi4uLy4uLy4uLy4uL3NyYy9nYXRld2F5cy9leGNlcHRpb25zL3N0b3JhZ2VFeGNlcHRpb25HYXRld2F5XCI7XG5pbXBvcnQgKiBhcyBTdG9yYWdlR2F0ZXdheSBmcm9tIFwiLi4vLi4vLi4vLi4vc3JjL2dhdGV3YXlzL3N0b3JhZ2Uvc3RvcmFnZUdhdGV3YXlcIjtcblxuZGVzY3JpYmUoXCJUZXN0cyBvZiBzdG9yYWdlR2F0ZXdheVwiLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIHJlc2V0QWxsV2hlbk1vY2tzKCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBrZXkgPSBcImFueUtleVwiO1xuICAgIGNvbnN0IHZhbHVlID0gXCJhbnlWYWx1ZVwiO1xuXG4gICAgaXQoXCJUZXN0IHdpdGggcHV0L3N1Y2Nlc3NcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBtb2NrZWRBc3luY1N0b3JhZ2UgPSBqZXN0LnNweU9uKEFzeW5jU3RvcmFnZSwgXCJzZXRJdGVtXCIpO1xuICAgICAgICB3aGVuKG1vY2tlZEFzeW5jU3RvcmFnZSkuY2FsbGVkV2l0aChrZXksIHZhbHVlKS5tb2NrUmVzb2x2ZWRWYWx1ZSgpO1xuXG4gICAgICAgIGF3YWl0IFN0b3JhZ2VHYXRld2F5LnB1dChrZXksIHZhbHVlKTtcblxuICAgICAgICBleHBlY3QobW9ja2VkQXN5bmNTdG9yYWdlKS50b0JlQ2FsbGVkV2l0aChrZXksIHZhbHVlKTtcbiAgICB9KTtcblxuICAgIGl0KFwiVGVzdCB3aXRoIHB1dC9lcnJvclwiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG1vY2tlZEFzeW5jU3RvcmFnZSA9IGplc3Quc3B5T24oQXN5bmNTdG9yYWdlLCBcInNldEl0ZW1cIik7XG4gICAgICAgIHdoZW4obW9ja2VkQXN5bmNTdG9yYWdlKS5jYWxsZWRXaXRoKGtleSwgdmFsdWUpLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcigpKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgU3RvcmFnZUdhdGV3YXkucHV0KGtleSwgdmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgZXhwZWN0KGVycm9yKS50b0JlSW5zdGFuY2VPZihTdG9yYWdlRXhjZXB0aW9uR2F0ZXdheSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KFwiVGVzdCB3aXRoIGdldC9zdWNjZXNzXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgbW9ja2VkQXN5bmNTdG9yYWdlID0gamVzdC5zcHlPbihBc3luY1N0b3JhZ2UsIFwiZ2V0SXRlbVwiKTtcbiAgICAgICAgd2hlbihtb2NrZWRBc3luY1N0b3JhZ2UpLmNhbGxlZFdpdGgoa2V5KS5tb2NrUmVzb2x2ZWRWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgICAgY29uc3QgdmFsdWVSZXNwb25zZSA9IGF3YWl0IFN0b3JhZ2VHYXRld2F5LmdldChrZXkpO1xuXG4gICAgICAgIGV4cGVjdCh2YWx1ZVJlc3BvbnNlKS50b0VxdWFsKHZhbHVlKTtcbiAgICB9KTtcblxuICAgIGl0KFwiVGVzdCB3aXRoIGdldC9lcnJvclwiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG1vY2tlZEFzeW5jU3RvcmFnZSA9IGplc3Quc3B5T24oQXN5bmNTdG9yYWdlLCBcImdldEl0ZW1cIik7XG4gICAgICAgIHdoZW4obW9ja2VkQXN5bmNTdG9yYWdlKS5jYWxsZWRXaXRoKGtleSkubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCkpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgU3RvcmFnZUdhdGV3YXkuZ2V0KGtleSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBleHBlY3QoZXJyb3IpLnRvQmVJbnN0YW5jZU9mKFN0b3JhZ2VFeGNlcHRpb25HYXRld2F5KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoXCJUZXN0IHdpdGggcmVtb3ZlL3N1Y2Nlc3NcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBtb2NrZWRBc3luY1N0b3JhZ2UgPSBqZXN0LnNweU9uKEFzeW5jU3RvcmFnZSwgXCJyZW1vdmVJdGVtXCIpO1xuICAgICAgICB3aGVuKG1vY2tlZEFzeW5jU3RvcmFnZSkuY2FsbGVkV2l0aChrZXkpLm1vY2tSZXNvbHZlZFZhbHVlKCk7XG5cbiAgICAgICAgYXdhaXQgU3RvcmFnZUdhdGV3YXkucmVtb3ZlKGtleSk7XG5cbiAgICAgICAgZXhwZWN0KG1vY2tlZEFzeW5jU3RvcmFnZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoa2V5KTtcbiAgICB9KTtcblxuICAgIGl0KFwiVGVzdCB3aXRoIHJlbW92ZS9lcnJvclwiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG1vY2tlZEFzeW5jU3RvcmFnZSA9IGplc3Quc3B5T24oQXN5bmNTdG9yYWdlLCBcInJlbW92ZUl0ZW1cIik7XG4gICAgICAgIHdoZW4obW9ja2VkQXN5bmNTdG9yYWdlKS5jYWxsZWRXaXRoKGtleSkubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCkpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgU3RvcmFnZUdhdGV3YXkucmVtb3ZlKGtleSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBleHBlY3QoZXJyb3IpLnRvQmVJbnN0YW5jZU9mKFN0b3JhZ2VFeGNlcHRpb25HYXRld2F5KTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7XG4iXX0=