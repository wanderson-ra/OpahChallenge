{"version":3,"sources":["filmGateway.unit.test.ts"],"names":["describe","beforeEach","jest","clearAllMocks","it","episodeId","filmResponseJson","filmResponseJsonTemplateFull","build","properties","startWars","baseUrl","get","reply","film","expect","characters","toEqual","Date","created","director","edited","episode_id","openingCrawl","opening_crawl","planets","producer","releaseDate","release_date","species","starships","title","url","vehicles","toBeInstanceOf","FilmNotFoundGatewayException","DefaultRestGatewayException"],"mappings":"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","sourcesContent":["import nock, { cleanAll } from \"nock\";\n\nimport { DefaultRestGatewayException } from \"../../../../../src/gateways/exceptions/defaultGatewayException\";\nimport { FilmNotFoundGatewayException } from \"../../../../../src/gateways/exceptions/filmNotFoundGatewayException\";\nimport { findByEpisodeId } from \"../../../../../src/gateways/http/film/filmGateway\";\n\nimport { Film } from \"../../../../../src/domains/films\";\n\nimport { properties } from \"../../../../../src/configurations/properties\";\n\nimport { filmResponseJsonTemplateFull } from \"../../../../dataBuilders/cases/http/film/filmResponseJson.template\";\n\ndescribe(\"Tests of filmGateway/findByEpisodeId\", () => {\n    beforeEach(() => {\n        jest.clearAllMocks();\n        cleanAll();\n    });\n\n    it(\"Test with success\", async () => {\n        const episodeId = 1;\n        const filmResponseJson = filmResponseJsonTemplateFull.build();\n\n        nock(properties.startWars.baseUrl).get(`/films/${episodeId}`).reply(200, filmResponseJson);\n\n        const film: Film = await findByEpisodeId(episodeId);\n\n        expect(film.characters).toEqual(filmResponseJson.characters);\n        expect(new Date(film.created)).toEqual(filmResponseJson.created);\n        expect(film.director).toEqual(filmResponseJson.director);\n        expect(new Date(film.edited)).toEqual(filmResponseJson.edited);\n        expect(film.episodeId).toEqual(filmResponseJson.episode_id);\n        expect(film.openingCrawl).toEqual(filmResponseJson.opening_crawl);\n        expect(film.planets).toEqual(filmResponseJson.planets);\n        expect(film.producer).toEqual(filmResponseJson.producer);\n        expect(new Date(film.releaseDate)).toEqual(filmResponseJson.release_date);\n        expect(film.species).toEqual(filmResponseJson.species);\n        expect(film.starships).toEqual(filmResponseJson.starships);\n        expect(film.title).toEqual(filmResponseJson.title);\n        expect(film.url).toEqual(filmResponseJson.url);\n        expect(film.vehicles).toEqual(filmResponseJson.vehicles);\n    });\n\n    it(\"Test with error not found\", async () => {\n        const episodeId = 1;\n\n        nock(properties.startWars.baseUrl).get(`/films/${episodeId}`).reply(404);\n        try {\n            await findByEpisodeId(episodeId);\n        } catch (error) {\n            expect(error).toBeInstanceOf(FilmNotFoundGatewayException);\n        }\n    });\n\n    it(\"Test with error default\", async () => {\n        const episodeId = 1;\n\n        nock(properties.startWars.baseUrl).get(`/films/${episodeId}`).reply(500);\n        try {\n            await findByEpisodeId(episodeId);\n        } catch (error) {\n            expect(error).toBeInstanceOf(DefaultRestGatewayException);\n        }\n    });\n});\n"]}