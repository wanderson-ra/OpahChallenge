{"version":3,"sources":["storageGateway.unit.test.ts"],"names":["describe","beforeEach","key","value","it","mockedAsyncStorage","jest","spyOn","AsyncStorage","calledWith","mockResolvedValue","StorageGateway","put","expect","toBeCalledWith","mockRejectedValue","Error","toBeInstanceOf","StorageExceptionGateway","get","valueResponse","toEqual","remove","toHaveBeenCalledWith"],"mappings":"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","sourcesContent":["import AsyncStorage from \"@react-native-community/async-storage\";\nimport { when, resetAllWhenMocks } from \"jest-when\";\n\nimport { StorageExceptionGateway } from \"../../../../src/gateways/exceptions/storageExceptionGateway\";\nimport * as StorageGateway from \"../../../../src/gateways/storage/storageGateway\";\n\ndescribe(\"Tests of storageGateway\", () => {\n    beforeEach(() => {\n        resetAllWhenMocks();\n    });\n\n    const key = \"anyKey\";\n    const value = \"anyValue\";\n\n    it(\"Test with put/success\", async () => {\n        const mockedAsyncStorage = jest.spyOn(AsyncStorage, \"setItem\");\n        when(mockedAsyncStorage).calledWith(key, value).mockResolvedValue();\n\n        await StorageGateway.put(key, value);\n\n        expect(mockedAsyncStorage).toBeCalledWith(key, value);\n    });\n\n    it(\"Test with put/error\", async () => {\n        const mockedAsyncStorage = jest.spyOn(AsyncStorage, \"setItem\");\n        when(mockedAsyncStorage).calledWith(key, value).mockRejectedValue(new Error());\n\n        try {\n            await StorageGateway.put(key, value);\n        } catch (error) {\n            expect(error).toBeInstanceOf(StorageExceptionGateway);\n        }\n    });\n\n    it(\"Test with get/success\", async () => {\n        const mockedAsyncStorage = jest.spyOn(AsyncStorage, \"getItem\");\n        when(mockedAsyncStorage).calledWith(key).mockResolvedValue(value);\n\n        const valueResponse = await StorageGateway.get(key);\n\n        expect(valueResponse).toEqual(value);\n    });\n\n    it(\"Test with get/error\", async () => {\n        const mockedAsyncStorage = jest.spyOn(AsyncStorage, \"getItem\");\n        when(mockedAsyncStorage).calledWith(key).mockRejectedValue(new Error());\n        try {\n            await StorageGateway.get(key);\n        } catch (error) {\n            expect(error).toBeInstanceOf(StorageExceptionGateway);\n        }\n    });\n\n    it(\"Test with remove/success\", async () => {\n        const mockedAsyncStorage = jest.spyOn(AsyncStorage, \"removeItem\");\n        when(mockedAsyncStorage).calledWith(key).mockResolvedValue();\n\n        await StorageGateway.remove(key);\n\n        expect(mockedAsyncStorage).toHaveBeenCalledWith(key);\n    });\n\n    it(\"Test with remove/error\", async () => {\n        const mockedAsyncStorage = jest.spyOn(AsyncStorage, \"removeItem\");\n        when(mockedAsyncStorage).calledWith(key).mockRejectedValue(new Error());\n        try {\n            await StorageGateway.remove(key);\n        } catch (error) {\n            expect(error).toBeInstanceOf(StorageExceptionGateway);\n        }\n    });\n});\n"]}