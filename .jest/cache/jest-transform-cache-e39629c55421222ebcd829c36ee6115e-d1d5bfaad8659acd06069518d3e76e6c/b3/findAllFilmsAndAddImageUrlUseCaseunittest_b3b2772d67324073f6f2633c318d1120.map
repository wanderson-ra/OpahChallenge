{"version":3,"sources":["findAllFilmsAndAddImageUrlUseCase.unit.test.ts"],"names":["describe","beforeAll","it","film","filmTemplateFullWithFixedEpisodeId","build","expectedFilmResponse","imageUrl","expectedFilmsList","mockedFilmGateway","jest","spyOn","FilmGateway","calledWith","mockResolvedValue","FindAllFilmsAndAddImageUrlUseCase","findAll","filmsResponse","expect","toEqual","toBeCalled"],"mappings":";;;;;;;;AAAA;;AAEA;;AAEA;;AAEA;;AAEAA,QAAQ,CAAC,4CAAD,EAA+C,YAAM;AACzDC,EAAAA,SAAS,CAAC,YAAM;AACZ;AACH,GAFQ,CAAT;AAIAC,EAAAA,EAAE,CAAC,qCAAD,EAAwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAChCC,YAAAA,IADgC,GACzBC,iDAAmCC,KAAnC,EADyB;AAGhCC,YAAAA,oBAHgC,8BAI/BH,IAJ+B;AAKlCI,cAAAA,QAAQ,EACJ;AAN8B;AAQhCC,YAAAA,iBARgC,GAQZ,CAACF,oBAAD,CARY;AAUhCG,YAAAA,iBAVgC,GAUZC,IAAI,CAACC,KAAL,CAAWC,WAAX,EAAwB,SAAxB,CAVY;AAWtC,gCAAKH,iBAAL,EAAwBI,UAAxB,GAAqCC,iBAArC,CAAuD,CAACX,IAAD,CAAvD;AAXsC;AAAA,8CAaVY,iCAAiC,CAACC,OAAlC,EAbU;;AAAA;AAahCC,YAAAA,aAbgC;AAetCC,YAAAA,MAAM,CAACD,aAAD,CAAN,CAAsBE,OAAtB,CAA8BX,iBAA9B;AACAU,YAAAA,MAAM,CAACT,iBAAD,CAAN,CAA0BW,UAA1B;;AAhBsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxC,CAAF;AAkBH,CAvBO,CAAR","sourcesContent":["import { when, resetAllWhenMocks } from \"jest-when\";\n\nimport * as FilmGateway from \"../../../src/gateways/http/film/filmGateway\";\n\nimport * as FindAllFilmsAndAddImageUrlUseCase from \"../../../src/useCases/findAllFilmsAndAddImageUrlUseCase\";\n\nimport { filmTemplateFullWithFixedEpisodeId } from \"../../dataBuilders/domains/filmTEmplate\";\n\ndescribe(\"Tests of FindAllFilmsAndAddImageUrlUseCase\", () => {\n    beforeAll(() => {\n        resetAllWhenMocks();\n    });\n\n    it(\"Test with success and add image url\", async () => {\n        const film = filmTemplateFullWithFixedEpisodeId.build();\n\n        const expectedFilmResponse = {\n            ...film,\n            imageUrl:\n                \"https://lumiere-a.akamaihd.net/v1/images/Star-Wars-Phantom-Menace-I-Poster_f5832812.jpeg?region=0%2C250%2C678%2C340&width=600\",\n        };\n        const expectedFilmsList = [expectedFilmResponse];\n\n        const mockedFilmGateway = jest.spyOn(FilmGateway, \"findAll\");\n        when(mockedFilmGateway).calledWith().mockResolvedValue([film]);\n\n        const filmsResponse = await FindAllFilmsAndAddImageUrlUseCase.findAll();\n\n        expect(filmsResponse).toEqual(expectedFilmsList);\n        expect(mockedFilmGateway).toBeCalled();\n    });\n});\n"]}