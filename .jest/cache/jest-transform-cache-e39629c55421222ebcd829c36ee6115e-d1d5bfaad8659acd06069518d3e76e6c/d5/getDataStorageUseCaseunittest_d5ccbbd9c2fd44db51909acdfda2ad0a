b64c93691635f80b3f16c14ce9e26c60
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _jestWhen = require("jest-when");

var StorageGateway = _interopRequireWildcard(require("../../../src/gateways/storage/storageGateway"));

var GetDataStorageUseCase = _interopRequireWildcard(require("../../../src/useCases/getDataStorageUseCase"));

describe("Tests of GetDataStorageUseCase", function () {
  beforeAll(function () {
    (0, _jestWhen.resetAllWhenMocks)();
  });
  it("Test with success string data", function _callee() {
    var valueString, key, mockedStorageGateway, dataResponse;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            valueString = "anyValueString";
            key = "anyKey";
            mockedStorageGateway = jest.spyOn(StorageGateway, "get");
            (0, _jestWhen.when)(mockedStorageGateway).calledWith(key).mockResolvedValue(valueString);
            _context.next = 6;
            return _regenerator.default.awrap(GetDataStorageUseCase.get(key));

          case 6:
            dataResponse = _context.sent;
            expect(dataResponse).toEqual(valueString);
            expect(mockedStorageGateway).toBeCalledWith(key);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldERhdGFTdG9yYWdlVXNlQ2FzZS51bml0LnRlc3QudHMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJiZWZvcmVBbGwiLCJpdCIsInZhbHVlU3RyaW5nIiwia2V5IiwibW9ja2VkU3RvcmFnZUdhdGV3YXkiLCJqZXN0Iiwic3B5T24iLCJTdG9yYWdlR2F0ZXdheSIsImNhbGxlZFdpdGgiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsIkdldERhdGFTdG9yYWdlVXNlQ2FzZSIsImdldCIsImRhdGFSZXNwb25zZSIsImV4cGVjdCIsInRvRXF1YWwiLCJ0b0JlQ2FsbGVkV2l0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBRUE7O0FBRUE7O0FBRUFBLFFBQVEsQ0FBQyxnQ0FBRCxFQUFtQyxZQUFNO0FBQzdDQyxFQUFBQSxTQUFTLENBQUMsWUFBTTtBQUNaO0FBQ0gsR0FGUSxDQUFUO0FBSUFDLEVBQUFBLEVBQUUsQ0FBQywrQkFBRCxFQUFrQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDMUJDLFlBQUFBLFdBRDBCLEdBQ1osZ0JBRFk7QUFFMUJDLFlBQUFBLEdBRjBCLEdBRXBCLFFBRm9CO0FBSTFCQyxZQUFBQSxvQkFKMEIsR0FJSEMsSUFBSSxDQUFDQyxLQUFMLENBQVdDLGNBQVgsRUFBMkIsS0FBM0IsQ0FKRztBQUtoQyxnQ0FBS0gsb0JBQUwsRUFBMkJJLFVBQTNCLENBQXNDTCxHQUF0QyxFQUEyQ00saUJBQTNDLENBQTZEUCxXQUE3RDtBQUxnQztBQUFBLDhDQU9MUSxxQkFBcUIsQ0FBQ0MsR0FBdEIsQ0FBMEJSLEdBQTFCLENBUEs7O0FBQUE7QUFPMUJTLFlBQUFBLFlBUDBCO0FBU2hDQyxZQUFBQSxNQUFNLENBQUNELFlBQUQsQ0FBTixDQUFxQkUsT0FBckIsQ0FBNkJaLFdBQTdCO0FBQ0FXLFlBQUFBLE1BQU0sQ0FBQ1Qsb0JBQUQsQ0FBTixDQUE2QlcsY0FBN0IsQ0FBNENaLEdBQTVDOztBQVZnQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUFsQyxDQUFGO0FBWUgsQ0FqQk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdoZW4sIHJlc2V0QWxsV2hlbk1vY2tzIH0gZnJvbSBcImplc3Qtd2hlblwiO1xuXG5pbXBvcnQgKiBhcyBTdG9yYWdlR2F0ZXdheSBmcm9tIFwiLi4vLi4vLi4vc3JjL2dhdGV3YXlzL3N0b3JhZ2Uvc3RvcmFnZUdhdGV3YXlcIjtcblxuaW1wb3J0ICogYXMgR2V0RGF0YVN0b3JhZ2VVc2VDYXNlIGZyb20gXCIuLi8uLi8uLi9zcmMvdXNlQ2FzZXMvZ2V0RGF0YVN0b3JhZ2VVc2VDYXNlXCI7XG5cbmRlc2NyaWJlKFwiVGVzdHMgb2YgR2V0RGF0YVN0b3JhZ2VVc2VDYXNlXCIsICgpID0+IHtcbiAgICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgICAgICByZXNldEFsbFdoZW5Nb2NrcygpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJUZXN0IHdpdGggc3VjY2VzcyBzdHJpbmcgZGF0YVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlU3RyaW5nID0gXCJhbnlWYWx1ZVN0cmluZ1wiO1xuICAgICAgICBjb25zdCBrZXkgPSBcImFueUtleVwiO1xuXG4gICAgICAgIGNvbnN0IG1vY2tlZFN0b3JhZ2VHYXRld2F5ID0gamVzdC5zcHlPbihTdG9yYWdlR2F0ZXdheSwgXCJnZXRcIik7XG4gICAgICAgIHdoZW4obW9ja2VkU3RvcmFnZUdhdGV3YXkpLmNhbGxlZFdpdGgoa2V5KS5tb2NrUmVzb2x2ZWRWYWx1ZSh2YWx1ZVN0cmluZyk7XG5cbiAgICAgICAgY29uc3QgZGF0YVJlc3BvbnNlID0gYXdhaXQgR2V0RGF0YVN0b3JhZ2VVc2VDYXNlLmdldChrZXkpO1xuXG4gICAgICAgIGV4cGVjdChkYXRhUmVzcG9uc2UpLnRvRXF1YWwodmFsdWVTdHJpbmcpO1xuICAgICAgICBleHBlY3QobW9ja2VkU3RvcmFnZUdhdGV3YXkpLnRvQmVDYWxsZWRXaXRoKGtleSk7XG4gICAgfSk7XG59KTtcbiJdfQ==