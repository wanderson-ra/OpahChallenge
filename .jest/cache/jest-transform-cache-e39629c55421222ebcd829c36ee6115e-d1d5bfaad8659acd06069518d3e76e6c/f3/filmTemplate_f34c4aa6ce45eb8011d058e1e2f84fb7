809a2c7a07b6476c36babed4cbf8f066
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filmTemplateFullWithFixedEpisodeId = exports.filmTemplateFull = void 0;

var factory = _interopRequireWildcard(require("factory.ts"));

var _faker = _interopRequireDefault(require("faker"));

var filmTemplateFull = factory.Sync.makeFactory({
  characters: [_faker.default.random.words(2)],
  created: _faker.default.date.past(),
  director: _faker.default.name.findName(),
  edited: _faker.default.date.past(),
  episodeId: _faker.default.random.number(),
  openingCrawl: _faker.default.lorem.sentences(),
  planets: [_faker.default.random.words(2)],
  producer: _faker.default.name.findName(),
  releaseDate: _faker.default.date.past(),
  species: [_faker.default.random.words(2)],
  starships: [_faker.default.random.words(2)],
  title: _faker.default.name.title(),
  url: _faker.default.internet.url(),
  vehicles: _faker.default.random.arrayElements()
});
exports.filmTemplateFull = filmTemplateFull;
var filmTemplateFullWithFixedEpisodeId = factory.Sync.makeFactory({
  characters: [_faker.default.random.words(2)],
  created: _faker.default.date.past(),
  director: _faker.default.name.findName(),
  edited: _faker.default.date.past(),
  episodeId: 1,
  openingCrawl: _faker.default.lorem.sentences(),
  planets: [_faker.default.random.words(2)],
  producer: _faker.default.name.findName(),
  releaseDate: _faker.default.date.past(),
  species: [_faker.default.random.words(2)],
  starships: [_faker.default.random.words(2)],
  title: _faker.default.name.title(),
  url: _faker.default.internet.url(),
  vehicles: _faker.default.random.arrayElements()
});
exports.filmTemplateFullWithFixedEpisodeId = filmTemplateFullWithFixedEpisodeId;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbG1UZW1wbGF0ZS50cyJdLCJuYW1lcyI6WyJmaWxtVGVtcGxhdGVGdWxsIiwiZmFjdG9yeSIsIlN5bmMiLCJtYWtlRmFjdG9yeSIsImNoYXJhY3RlcnMiLCJmYWtlciIsInJhbmRvbSIsIndvcmRzIiwiY3JlYXRlZCIsImRhdGUiLCJwYXN0IiwiZGlyZWN0b3IiLCJuYW1lIiwiZmluZE5hbWUiLCJlZGl0ZWQiLCJlcGlzb2RlSWQiLCJudW1iZXIiLCJvcGVuaW5nQ3Jhd2wiLCJsb3JlbSIsInNlbnRlbmNlcyIsInBsYW5ldHMiLCJwcm9kdWNlciIsInJlbGVhc2VEYXRlIiwic3BlY2llcyIsInN0YXJzaGlwcyIsInRpdGxlIiwidXJsIiwiaW50ZXJuZXQiLCJ2ZWhpY2xlcyIsImFycmF5RWxlbWVudHMiLCJmaWxtVGVtcGxhdGVGdWxsV2l0aEZpeGVkRXBpc29kZUlkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFJTyxJQUFNQSxnQkFBZ0IsR0FBR0MsT0FBTyxDQUFDQyxJQUFSLENBQWFDLFdBQWIsQ0FBK0I7QUFDM0RDLEVBQUFBLFVBQVUsRUFBRSxDQUFDQyxlQUFNQyxNQUFOLENBQWFDLEtBQWIsQ0FBbUIsQ0FBbkIsQ0FBRCxDQUQrQztBQUUzREMsRUFBQUEsT0FBTyxFQUFFSCxlQUFNSSxJQUFOLENBQVdDLElBQVgsRUFGa0Q7QUFHM0RDLEVBQUFBLFFBQVEsRUFBRU4sZUFBTU8sSUFBTixDQUFXQyxRQUFYLEVBSGlEO0FBSTNEQyxFQUFBQSxNQUFNLEVBQUVULGVBQU1JLElBQU4sQ0FBV0MsSUFBWCxFQUptRDtBQUszREssRUFBQUEsU0FBUyxFQUFFVixlQUFNQyxNQUFOLENBQWFVLE1BQWIsRUFMZ0Q7QUFNM0RDLEVBQUFBLFlBQVksRUFBRVosZUFBTWEsS0FBTixDQUFZQyxTQUFaLEVBTjZDO0FBTzNEQyxFQUFBQSxPQUFPLEVBQUUsQ0FBQ2YsZUFBTUMsTUFBTixDQUFhQyxLQUFiLENBQW1CLENBQW5CLENBQUQsQ0FQa0Q7QUFRM0RjLEVBQUFBLFFBQVEsRUFBRWhCLGVBQU1PLElBQU4sQ0FBV0MsUUFBWCxFQVJpRDtBQVMzRFMsRUFBQUEsV0FBVyxFQUFFakIsZUFBTUksSUFBTixDQUFXQyxJQUFYLEVBVDhDO0FBVTNEYSxFQUFBQSxPQUFPLEVBQUUsQ0FBQ2xCLGVBQU1DLE1BQU4sQ0FBYUMsS0FBYixDQUFtQixDQUFuQixDQUFELENBVmtEO0FBVzNEaUIsRUFBQUEsU0FBUyxFQUFFLENBQUNuQixlQUFNQyxNQUFOLENBQWFDLEtBQWIsQ0FBbUIsQ0FBbkIsQ0FBRCxDQVhnRDtBQVkzRGtCLEVBQUFBLEtBQUssRUFBRXBCLGVBQU1PLElBQU4sQ0FBV2EsS0FBWCxFQVpvRDtBQWEzREMsRUFBQUEsR0FBRyxFQUFFckIsZUFBTXNCLFFBQU4sQ0FBZUQsR0FBZixFQWJzRDtBQWMzREUsRUFBQUEsUUFBUSxFQUFFdkIsZUFBTUMsTUFBTixDQUFhdUIsYUFBYjtBQWRpRCxDQUEvQixDQUF6Qjs7QUFpQkEsSUFBTUMsa0NBQWtDLEdBQUc3QixPQUFPLENBQUNDLElBQVIsQ0FBYUMsV0FBYixDQUErQjtBQUM3RUMsRUFBQUEsVUFBVSxFQUFFLENBQUNDLGVBQU1DLE1BQU4sQ0FBYUMsS0FBYixDQUFtQixDQUFuQixDQUFELENBRGlFO0FBRTdFQyxFQUFBQSxPQUFPLEVBQUVILGVBQU1JLElBQU4sQ0FBV0MsSUFBWCxFQUZvRTtBQUc3RUMsRUFBQUEsUUFBUSxFQUFFTixlQUFNTyxJQUFOLENBQVdDLFFBQVgsRUFIbUU7QUFJN0VDLEVBQUFBLE1BQU0sRUFBRVQsZUFBTUksSUFBTixDQUFXQyxJQUFYLEVBSnFFO0FBSzdFSyxFQUFBQSxTQUFTLEVBQUUsQ0FMa0U7QUFNN0VFLEVBQUFBLFlBQVksRUFBRVosZUFBTWEsS0FBTixDQUFZQyxTQUFaLEVBTitEO0FBTzdFQyxFQUFBQSxPQUFPLEVBQUUsQ0FBQ2YsZUFBTUMsTUFBTixDQUFhQyxLQUFiLENBQW1CLENBQW5CLENBQUQsQ0FQb0U7QUFRN0VjLEVBQUFBLFFBQVEsRUFBRWhCLGVBQU1PLElBQU4sQ0FBV0MsUUFBWCxFQVJtRTtBQVM3RVMsRUFBQUEsV0FBVyxFQUFFakIsZUFBTUksSUFBTixDQUFXQyxJQUFYLEVBVGdFO0FBVTdFYSxFQUFBQSxPQUFPLEVBQUUsQ0FBQ2xCLGVBQU1DLE1BQU4sQ0FBYUMsS0FBYixDQUFtQixDQUFuQixDQUFELENBVm9FO0FBVzdFaUIsRUFBQUEsU0FBUyxFQUFFLENBQUNuQixlQUFNQyxNQUFOLENBQWFDLEtBQWIsQ0FBbUIsQ0FBbkIsQ0FBRCxDQVhrRTtBQVk3RWtCLEVBQUFBLEtBQUssRUFBRXBCLGVBQU1PLElBQU4sQ0FBV2EsS0FBWCxFQVpzRTtBQWE3RUMsRUFBQUEsR0FBRyxFQUFFckIsZUFBTXNCLFFBQU4sQ0FBZUQsR0FBZixFQWJ3RTtBQWM3RUUsRUFBQUEsUUFBUSxFQUFFdkIsZUFBTUMsTUFBTixDQUFhdUIsYUFBYjtBQWRtRSxDQUEvQixDQUEzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZhY3RvcnkgZnJvbSBcImZhY3RvcnkudHNcIjtcbmltcG9ydCBmYWtlciBmcm9tIFwiZmFrZXJcIjtcblxuaW1wb3J0IHsgRmlsbSB9IGZyb20gXCIuLi8uLi8uLi9zcmMvZG9tYWlucy9maWxtc1wiO1xuXG5leHBvcnQgY29uc3QgZmlsbVRlbXBsYXRlRnVsbCA9IGZhY3RvcnkuU3luYy5tYWtlRmFjdG9yeTxGaWxtPih7XG4gICAgY2hhcmFjdGVyczogW2Zha2VyLnJhbmRvbS53b3JkcygyKV0sXG4gICAgY3JlYXRlZDogZmFrZXIuZGF0ZS5wYXN0KCksXG4gICAgZGlyZWN0b3I6IGZha2VyLm5hbWUuZmluZE5hbWUoKSxcbiAgICBlZGl0ZWQ6IGZha2VyLmRhdGUucGFzdCgpLFxuICAgIGVwaXNvZGVJZDogZmFrZXIucmFuZG9tLm51bWJlcigpLFxuICAgIG9wZW5pbmdDcmF3bDogZmFrZXIubG9yZW0uc2VudGVuY2VzKCksXG4gICAgcGxhbmV0czogW2Zha2VyLnJhbmRvbS53b3JkcygyKV0sXG4gICAgcHJvZHVjZXI6IGZha2VyLm5hbWUuZmluZE5hbWUoKSxcbiAgICByZWxlYXNlRGF0ZTogZmFrZXIuZGF0ZS5wYXN0KCksXG4gICAgc3BlY2llczogW2Zha2VyLnJhbmRvbS53b3JkcygyKV0sXG4gICAgc3RhcnNoaXBzOiBbZmFrZXIucmFuZG9tLndvcmRzKDIpXSxcbiAgICB0aXRsZTogZmFrZXIubmFtZS50aXRsZSgpLFxuICAgIHVybDogZmFrZXIuaW50ZXJuZXQudXJsKCksXG4gICAgdmVoaWNsZXM6IGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnRzKCksXG59KTtcblxuZXhwb3J0IGNvbnN0IGZpbG1UZW1wbGF0ZUZ1bGxXaXRoRml4ZWRFcGlzb2RlSWQgPSBmYWN0b3J5LlN5bmMubWFrZUZhY3Rvcnk8RmlsbT4oe1xuICAgIGNoYXJhY3RlcnM6IFtmYWtlci5yYW5kb20ud29yZHMoMildLFxuICAgIGNyZWF0ZWQ6IGZha2VyLmRhdGUucGFzdCgpLFxuICAgIGRpcmVjdG9yOiBmYWtlci5uYW1lLmZpbmROYW1lKCksXG4gICAgZWRpdGVkOiBmYWtlci5kYXRlLnBhc3QoKSxcbiAgICBlcGlzb2RlSWQ6IDEsXG4gICAgb3BlbmluZ0NyYXdsOiBmYWtlci5sb3JlbS5zZW50ZW5jZXMoKSxcbiAgICBwbGFuZXRzOiBbZmFrZXIucmFuZG9tLndvcmRzKDIpXSxcbiAgICBwcm9kdWNlcjogZmFrZXIubmFtZS5maW5kTmFtZSgpLFxuICAgIHJlbGVhc2VEYXRlOiBmYWtlci5kYXRlLnBhc3QoKSxcbiAgICBzcGVjaWVzOiBbZmFrZXIucmFuZG9tLndvcmRzKDIpXSxcbiAgICBzdGFyc2hpcHM6IFtmYWtlci5yYW5kb20ud29yZHMoMildLFxuICAgIHRpdGxlOiBmYWtlci5uYW1lLnRpdGxlKCksXG4gICAgdXJsOiBmYWtlci5pbnRlcm5ldC51cmwoKSxcbiAgICB2ZWhpY2xlczogZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudHMoKSxcbn0pO1xuIl19