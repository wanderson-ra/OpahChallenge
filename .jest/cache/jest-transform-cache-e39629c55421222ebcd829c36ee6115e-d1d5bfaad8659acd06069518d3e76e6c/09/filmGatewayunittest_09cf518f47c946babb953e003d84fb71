121435268d0f93d1f6a2b43ff07e2e54
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _nock = _interopRequireWildcard(require("nock"));

var _defaultGatewayException = require("../../../../../src/gateways/exceptions/defaultGatewayException");

var _filmNotFoundGatewayException = require("../../../../../src/gateways/exceptions/filmNotFoundGatewayException");

var _filmGateway = require("../../../../../src/gateways/http/film/filmGateway");

var _properties = require("../../../../../src/configurations/properties");

var _resultJson = require("../../../../dataBuilders/cases/http/film/resultJson.template");

describe("Tests of filmGateway/findAll", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    (0, _nock.cleanAll)();
  });
  it("Test with success", function _callee() {
    var resultsJson, films;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            resultsJson = _resultJson.resultJsonTemplate.build();
            (0, _nock.default)(_properties.properties.startWars.baseUrl).get("/films/").reply(200, resultsJson);
            _context.next = 4;
            return _regenerator.default.awrap((0, _filmGateway.findAll)());

          case 4:
            films = _context.sent;
            expect(films[0].characters).toEqual(resultsJson.results[0].characters);
            expect(new Date(films[0].created)).toEqual(resultsJson.results[0].created);
            expect(films[0].director).toEqual(resultsJson.results[0].director);
            expect(new Date(films[0].edited)).toEqual(resultsJson.results[0].edited);
            expect(films[0].episodeId).toEqual(resultsJson.results[0].episode_id);
            expect(films[0].openingCrawl).toEqual(resultsJson.results[0].opening_crawl);
            expect(films[0].planets).toEqual(resultsJson.results[0].planets);
            expect(films[0].producer).toEqual(resultsJson.results[0].producer);
            expect(new Date(films[0].releaseDate)).toEqual(resultsJson.results[0].release_date);
            expect(films[0].species).toEqual(resultsJson.results[0].species);
            expect(films[0].starships).toEqual(resultsJson.results[0].starships);
            expect(films[0].title).toEqual(resultsJson.results[0].title);
            expect(films[0].url).toEqual(resultsJson.results[0].url);
            expect(films[0].vehicles).toEqual(resultsJson.results[0].vehicles);

          case 19:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("Test with error not found", function _callee2() {
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            (0, _nock.default)(_properties.properties.startWars.baseUrl).get("/films/").reply(404);
            _context2.next = 4;
            return _regenerator.default.awrap((0, _filmGateway.findAll)());

          case 4:
            _context2.next = 9;
            break;

          case 6:
            _context2.prev = 6;
            _context2.t0 = _context2["catch"](0);
            expect(_context2.t0).toBeInstanceOf(_filmNotFoundGatewayException.FilmNotFoundGatewayException);

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, [[0, 6]], Promise);
  });
  it("Test with error default", function _callee3() {
    return _regenerator.default.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            (0, _nock.default)(_properties.properties.startWars.baseUrl).get("/films/").reply(500);
            _context3.prev = 1;
            _context3.next = 4;
            return _regenerator.default.awrap((0, _filmGateway.findAll)());

          case 4:
            _context3.next = 9;
            break;

          case 6:
            _context3.prev = 6;
            _context3.t0 = _context3["catch"](1);
            expect(_context3.t0).toBeInstanceOf(_defaultGatewayException.DefaultRestGatewayException);

          case 9:
          case "end":
            return _context3.stop();
        }
      }
    }, null, null, [[1, 6]], Promise);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,