{"version":3,"sources":["filmGateway.ts"],"names":["mapperFilmFromFilmResponseJson","filmResponseJson","Film","characters","created","director","edited","episodeId","episode_id","openingCrawl","opening_crawl","planets","producer","releaseDate","release_date","species","starships","title","url","vehicles","findByEpisodeId","properties","startWars","baseUrl","specialitiesResponse","data"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AAGA,IAAMA,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACC,gBAAD,EAA8C;AACjF,SAAO,IAAIC,WAAJ,CAAS;AACZC,IAAAA,UAAU,EAAEF,gBAAgB,CAACE,UADjB;AAEZC,IAAAA,OAAO,EAAEH,gBAAgB,CAACG,OAFd;AAGZC,IAAAA,QAAQ,EAAEJ,gBAAgB,CAACI,QAHf;AAIZC,IAAAA,MAAM,EAAEL,gBAAgB,CAACK,MAJb;AAKZC,IAAAA,SAAS,EAAEN,gBAAgB,CAACO,UALhB;AAMZC,IAAAA,YAAY,EAAER,gBAAgB,CAACS,aANnB;AAOZC,IAAAA,OAAO,EAAEV,gBAAgB,CAACU,OAPd;AAQZC,IAAAA,QAAQ,EAAEX,gBAAgB,CAACW,QARf;AASZC,IAAAA,WAAW,EAAEZ,gBAAgB,CAACa,YATlB;AAUZC,IAAAA,OAAO,EAAEd,gBAAgB,CAACc,OAVd;AAWZC,IAAAA,SAAS,EAAEf,gBAAgB,CAACe,SAXhB;AAYZC,IAAAA,KAAK,EAAEhB,gBAAgB,CAACgB,KAZZ;AAaZC,IAAAA,GAAG,EAAEjB,gBAAgB,CAACiB,GAbV;AAcZC,IAAAA,QAAQ,EAAElB,gBAAgB,CAACkB;AAdf,GAAT,CAAP;AAgBH,CAjBD;;AAmBO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAOb,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAEY,kBAAsBc,uBAAWC,SAAX,CAAqBC,OAA3C,aAA6DhB,SAA7D,CAFZ;;AAAA;AAEjBiB,UAAAA,oBAFiB;AAAA,2CAIhBxB,8BAA8B,CAACwB,oBAAoB,CAACC,IAAtB,CAJd;;AAAA;AAAA;AAAA;AAAA,gBAMjB,sDANiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB","sourcesContent":["import { Film } from \"src/domains/films\";\n\nimport { properties } from \"src/configurations/properties\";\n\nimport { get } from \"../baseApi\";\nimport { handlerSpecialityError } from \"./handlerError\";\nimport { FilmResponseJson } from \"./json/filmResponseJson\";\n\nconst mapperFilmFromFilmResponseJson = (filmResponseJson: FilmResponseJson): Film => {\n    return new Film({\n        characters: filmResponseJson.characters,\n        created: filmResponseJson.created,\n        director: filmResponseJson.director,\n        edited: filmResponseJson.edited,\n        episodeId: filmResponseJson.episode_id,\n        openingCrawl: filmResponseJson.opening_crawl,\n        planets: filmResponseJson.planets,\n        producer: filmResponseJson.producer,\n        releaseDate: filmResponseJson.release_date,\n        species: filmResponseJson.species,\n        starships: filmResponseJson.starships,\n        title: filmResponseJson.title,\n        url: filmResponseJson.url,\n        vehicles: filmResponseJson.vehicles,\n    });\n};\n\nexport const findByEpisodeId = async (episodeId: number): Promise<Film> => {\n    try {\n        const specialitiesResponse = await get<FilmResponseJson>(properties.startWars.baseUrl, `/film/${episodeId}`);\n\n        return mapperFilmFromFilmResponseJson(specialitiesResponse.data);\n    } catch (error) {\n        throw handlerSpecialityError(error);\n    }\n};\n"]}